1. Using C++ features as much as possible appropriately.
2. Respecting indentation rules:
    1. Every function/class/structure should be separated with a line
    2. Every namespace/typedef should be separated with a line
    3. Integral types may have no indention among themselves, but should have indention in general.
    4. Each nested structures should have indentation(1 tab=4 spaces)
3. Variable, function, class etc. names should be chosen wisely:
    1. Each name should contain/have very brief information about itself or what it is used for
    2. Every name should have the sign of "_" as separator(for example, int nb_params;)
4. Every and each written code has to be reviewed by both of the participants!
5. Each participant should be capable of manipulate the other's codes easily.
6. Each participant should suggest at least one of his better solutions to ease the other's work.
7. Either of participants has to work on his part of code at least 3 times in a week with completing at least one of his tasks.
8. Every file(mainly .cpp or .hpp) has to have comments about its functions(if necessary classes/structures) right below the appropriate functions and every file has to contain comment in the top of it explaining the general idea of the file clearly and briefly.
9. All files should be grouped in SRCS, LBRS, OBJS etc. folders appropriately after being completed or being ready to get used.
Data structures should be used to contain data and its functions which we are working on, and classes should be used to contain data and its functions which we are working with. So, basically, structures are to contain main or primary data while classes are to contain secondary data.
10. Memory and function managment should be clear and hardly destructible even if new lines codes are written later on(as a new update or something).
Data structures should be structered based on what they work on, and classes should be structured based on how they work.
